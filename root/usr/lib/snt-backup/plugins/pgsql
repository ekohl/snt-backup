#! /bin/bash
# voor bas(h) z'n syntax highlighting


#
# backup postgres databases.
#

function pgsql_backup {
	# defaults
	export PGUSER=postgres
	export PGPASSFILE=''

	# load config
	if [ -f "${CONFDIR}/pgsql/pgsql.conf" ] ; then
		. "${CONFDIR}/pgsql/pgsql.conf"
	fi

	if [ "x$PG_BACKUP_DISABLED" != 'x' ]; then
		return
	fi

	# do backup
	PG_SH="su $PGUSER"
	if [ "x$PGPASSFILE" != 'x' ]; then
		PG_SH="sh"
	fi

	# check whether the database is starting up
	$PG_SH -c 'echo -n | /usr/bin/psql 2>&1 | /bin/grep -q "FATAL:  the database system is starting up"' && return

	$PG_SH -c '/usr/bin/psql -t -d template1 -c "SELECT datname FROM pg_database ORDER BY datname"' | sed 's/^ *//;/^$/d' | (
		while read -r PGSQL_DB
		do
			if ! grep -Fxq "${PGSQL_DB}" "${CONFDIR}/pgsql/pgsql.exclude"
			then
				echo "Dumping pgsql database: '${PGSQL_DB}'";
				export PGSQL_DB

				if [ "${HOSTNAME_TAG}x" == "x" ]; then 
				    TOFILE="pgsql_${DATEFIX}_${PGSQL_DB}.sql"
				else
				    TOFILE="pgsql_${DATEFIX}_${HOSTNAME_TAG}_${PGSQL_DB}.sql"
				fi

				export PG_DUMP_OPTS=''
				if [ -f "${CONFDIR}/pgsql/pgsql.conf" ] ; then
					. "${CONFDIR}/pgsql/pgsql.conf"
				fi
				if [ -f "${CONFDIR}/pgsql/db.${PGSQL_DB}.conf" ]; then
					. "${CONFDIR}/pgsql/db.${PGSQL_DB}.conf"
				fi
				"${BASEDIR}/bin/rmt-client.pl" "${TODIR}/${TOFILE}${C_TAG}${E_TAG}" \
					$PG_SH -c '/usr/bin/pg_dump ${PG_DUMP_OPTS} "${PGSQL_DB}"' $COMPRESS $ENCRYPT $BUFFER \
					|| { touch "${SNAPSHOTDIR}/error"; echo 'pgsql dump failed.'; }
			fi
		done
	) 

	if [ "${HOSTNAME_TAG}x" == "x" ]; then 
	    TOFILE="pgsql_${DATEFIX}.sql"
	else
	    TOFILE="pgsql_${DATEFIX}_${HOSTNAME_TAG}.sql"
	fi

	/usr/bin/pg_lsclusters -h | {
		PG_BIN=''
		if [ -d '/usr/lib/postgresql/bin' ]; then
			PG_BIN='/usr/lib/postgresql/bin'
		fi
		while read pg_version pg_cluster pg_port pg_status pg_owner pg_data_dir pg_logfile; do
			if [ "$pg_status" = online ]; then
				PG_BIN="/usr/lib/postgresql/$pg_version/bin"
			fi
		done

		# on some systems, the pg_dumpall is globally available
		if [ -z "$PG_BIN" -a -x '/usr/bin/pg_dumpall' ]; then
			PG_BIN='/usr/bin'
		fi

		if [ -z "$PG_BIN" ]; then
			touch "${SNAPSHOTDIR}/error"
			echo "/usr/lib/postgresql/bin path not found!"
			false
		fi

		"${BASEDIR}/bin/rmt-client.pl" "${TODIR}/${TOFILE}${C_TAG}${E_TAG}" \
			$PG_SH -c "$PG_BIN/pg_dumpall -g ${PG_DUMPALL_OPTS}" $COMPRESS $ENCRYPT $BUFFER \
			|| { touch "${SNAPSHOTDIR}/error"; echo 'pgsql dump failed.'; }
	}
}

#
# clean_pgsql - ruimt tijdelijke bestanden op. wordt eens per week of maand
#               aangeroepen.
#
function pgsql_weekly {
	true
}

function pgsql_monthly {
	true
}
